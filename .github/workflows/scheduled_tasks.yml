name: Calorista Daily Tasks

on:
  schedule:
    - cron: '0 1 * * *'  # 1 AM UTC (3 AM Kyiv)
  workflow_dispatch:

jobs:
  daily-tasks:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'
          
      - name: Install dependencies
        run: |
          echo "üì¶ Installing core dependencies..."
          pip install -r calorista/requirements.txt
          echo "‚ûï Installing additional required packages..."
          pip install flask redis[hiredis]
          echo "‚úÖ Dependencies installed"
          
      - name: Setup environment
        run: |
          echo "üïí Timezone: $(TZ='Europe/Kiev' date)"
          echo "üêç Python version: $(python --version)"
          echo "üìÅ Working directory: $(pwd)"
          echo "üîç Installed packages:"
          pip list
          echo "::notice::Environment setup complete"
          
      - name: Verify Redis connection
        run: |
          echo "üîç Testing Redis connection..."
          python -c "
          import os, redis
          from urllib.parse import urlparse
          url = os.getenv('REDIS_URL')
          if not url:
              raise ValueError('REDIS_URL environment variable not set')
          print(f'Connecting to Redis at {urlparse(url).hostname}')
          r = redis.Redis.from_url(url)
          print(f'‚úÖ Redis ping: {r.ping()}')
          "
        env:
          REDIS_URL: ${{ secrets.REDIS_URL }}
          
      - name: Run main script
        run: |
          echo "üöÄ Starting main.py..."
          python calorista/main.py 2>&1 | tee main.log
          echo "::group::Main script output"
          cat main.log
          echo "::endgroup::"
        env:
          REDIS_URL: ${{ secrets.REDIS_URL }}
          TZ: 'Europe/Kiev'
          
      - name: Run historical loader
        run: |
          echo "üîÑ Starting historical loader..."
          python calorista/load_historical_to_redis.py 2>&1 | tee loader.log
          echo "::group::Loader output"
          cat loader.log
          echo "::endgroup::"
        env:
          REDIS_URL: ${{ secrets.REDIS_URL }}
          
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: execution-logs
          path: |
            main.log
            loader.log
          retention-days: 3
          
      - name: Completion status
        run: |
          if grep -q "Traceback" main.log loader.log; then
            echo "::error title=Failed::‚ùå Some tasks failed (check logs)"
            exit 1
          else
            echo "::notice title=Success::‚úÖ All tasks completed successfully!"
          fi
          echo "üìä View run details: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"